1. 클래스 상속
    1) 새로운 클래스를 정의할 때 이미 구현된 클래스를 베이스로 하여 상속(inheritance)받아서
       속성이나 기능을 확장하여 클래스를 구현됨
    2) 이미 구현된 클래스를 보다 더 구체적인 기능을 가진 클래스를 구현해야 할 때 기존 클래스를 상속함.

2. 1) A 클래스가 B 클래스에게 상속한다.
      - B클래스가 A클래스를 상속받는다.

    2) 상속하는 클래스 
        - 상위 클래스, parent class, base class, super class
       상속받는 클래스
        - 하위 클래스, child class, derived class, sub class

3. 상속의 문법
    1) extends 키워드 뒤에는 단 하나의 클래스만 올 수 있다.
        - 자바 단일 상속 (single inheritance)만을 지원.
    
    2)  class B extends A {

        }
    3) is a 관계 : ~ 은 ~ 이다.(자손클래스는 조상클래스이다.)
        - 직접적 관계
        - 만들어질 클래스에 영향을 가장 많이 주는 클래스는 상속함.


4. 상속을 구현하는 경우
    1) 상위 클래스는 하위 클래스보다 더 일반적인 개념과 기능을 가짐
    2) 하위 클래스는 상속을 받아서 상위 클래스보다 더 구체적인 개념과 기능을 가진다.
    3) 하위 클래스는 상위 클래스의 속성과 기능을 확장(extend)한다는 의미이다.

5. 포함 관계 (Composite)
    1) has a 관계 : ~은 ~을 가지고 있다.
        - 보조적인 것은 포함관계로 정의
    2) 다중 상속을 대체하는 방법
    3) 클래스의 멤버 변수로 다른 클래스를 선언하는 것
    4) 규모가 적은 클래스를 먼저 만들고, 이것을 조합하여 규모가 큰 클래스가 만들어감.

6. Object클래스
    1) 모든 클래스의 조상
    2) 사용자 정의 클래스는 아무것도 상속을 받지 않더라도 자동으로 Object를 상속 받음.

7. protected 예약어
    1) 외부 클래스에는 private으로 하위 클래스에서 public의 기능을 구현한 키워드
    2) 상위 클래스에 protected로 선언된 변수나 메서드는 다른 외부 클래스에서는 사용불가하지만 상속을 받은 하위 클래스에서는 사용 가능함.

8. 접근 제한자 (access modifier)의 가시성
                                외부클래스             하위클래스                 동일패키지                  내부클래스
    punlic                          O                      O                         O                           O
    protected                       X                      O                         O                           O
    선언되지 않음                    X                      X                         O                           O
    (default)
    private                         X                      X                         X                           O

9. 상속에서 클래스 생성 과정
    1) 하위클래스가 생성되는 과정
        - 하위 클래스가 생성될 때 상위 클래스가 먼저 생성된다.
            - new VIPCustomer()를 호출하면 Customer()가 먼저 호출이 된다.
        - 상위 클래스의 생성자가 호출되고 하위 클래스의 생성자가 호출됨
        - 하위 클래스의 생성자에서는 무조건 상위 클래스의 생성자가 호출되어야 한다.
        
        - 하위 클래스에서 상위 클래스의 생성자를 호출하는 코드가 없는 경우
            - 컴파일러는 상위 클래스 기본 생성자를 호출하기 위한 super()를 추가함.
                - super()로 호출되는 생성자는 상위 클래스의 기본 생성자이다.
            - 만약 상위 클래스의 기본 생성자가 없는 경우 
              (매개변수가 있는 생성자만 존재하는 경우)
                - 하위 클래스는 명시적으로 상위 클래스의 생성자를 호출해야함. 

10. 상속에서 인스턴스 메모리 상태
    1) 항상 상위 클래스의 인스턴스가 먼저 생성되고, 하위 클래스의 인스턴스가 생성됨.
    
11. 상위 클래스로의 묵시적 형 변환 (UpCasting)
       선언된 클래스형(Type) : 상위 클래스형 
       -------- 
    1) Customer customerL2 = new VIPCustomer(20220902, "이방원");
                                 -------------------------------
                                 생성된 인스턴스의 생성자 : 하위 클래스 생성자

    2) 상위 클래스형(Type)으로 변수를 선언하고 하위 클래스 인스턴스를 생성할 수 있음.
    3) 하위 클래스는 상위 클래스의 타입을 내포하고 있으므로 상위 클래스로 묵시적 형변환이 가능하다.
    4) 상속관계에서 모든 하위 클래스는 상위클래스로 묵시적 형변환이 된다. but, 그 역은 성립하지 않는다.
    5) VIPCustomer() 생성자의 호출로 인스턴스는 생성되었지만 타입이 Customer이므로 접근할 수 있는 변수나 메서드는 Customer의 변수와 메서드이다.

12. 메서드 overriding (재정의)
    1) 하위 클래스에서 메서드 재정의 함
    2) 상위 클래스에 정의된 메서드의 구현 내용이 하위 클래스에서 구현할 내용과 맞지 않는 경우
       하위 클래스에서 동일한 이름의 메서드를 재정의 할 수 있다.
    3) 조상 클래스에서 상속받은 메서드를 자손한테 맞게 끔 구현부를 수정하는 것
    4) 반드시 메서드 선언부는 동일해야 함(리턴타입, 메서드명, 매개변수)
    5) modify, change 개념

    vs 
    오버로딩(overloading)
        - 매개변수의 개수, 타입, 순서가 다른 경우임.
        - 매개변수의 이름과 리턴타입은 영향을 주지 않음.
        - 새로운 메서드를 만드는 것 (new 개념)

13. 에노테이션 (annotation)
    1) 원래 주석이라는 의미
    2) 컴파일러에게 특별한 정보를 제공해주는 역할
    3) @Override
        - 재정의된 메서드라는 정보 제공

14. 고객관리 프로그램 - 멤버쉽(예시)
    1) 고객의 등급에 따른 차별화된 서비스 제공해
    2) 할인율, 적립금이 다르게 적용
    3) 일반고객(Customer) 클래스
        - 속성 
            - 고객 아이디, 고객 이름, 고객 등급, 보너스 포인트, 보너스 포인트 비율
        - 물품 구매시 1%의 보너스 포인트 적립금
            - ex) 10000원 구매 -> 100원 적립
        - 기본 등급은 SILVER
    
    4) 우수고객( VIP Customer) 클래스
        - Customer 클래스에 추가해서 구현하는 것이 좋지 않음
        - VIP Customer 클래스를 따로 구현
            - Customer를 확장하여 구현함(상속)

        - 매출에 더 많은 기여를 하는 단골고객에게 혜택
            - 제품 구매시 10% 할인
            - 보너스 포인트 5% 적립
            - 담당 상담원 배정

    5) 중간 등급 고객(GoldCustomer) 만들기
        - 고객이 늘어 VIP 고객만큼 물건을 많이 구입하지는 않지만, 단골인 고객을 위해 GOLD 등급으로 관리하고 싶음
        - 혜택
            - 제품 구매 시 10% 할인
            - 보너스  포인트 2% 적립
            - 담당 상담원 미배정

15. 클래스 설계(정의)시 관계
    1) IS-A 관계 (is a relationship : inheritance)
        - 일반적인(general) 개념과 구체적인(specific) 개념과의 관계
        - 상위 클래스 : 하위 클래스보다 일반적인 개념
        - 하위 클래스 : 상위 클래스보다 구체적인 개념들이 더해짐
        - 상속은 클래스간의 결합도가 높은 설계(디자인)
        - 상위 클래스의 수정이 하위 클래스에 영향을 미칠 수 있다.
            - AppCompatActivity vs Activity
        - 계층구조가 복잡하거나 hierarchy가 높으면 좋지 않음.

    2) HAS-A 관계 (Composition)
        - 클래스가 다른 클래스를 포함하는 관계 (변수로 선언)    
        - 코드 재사용의 가장 일반적인 방법
        - 상속하지 않음
