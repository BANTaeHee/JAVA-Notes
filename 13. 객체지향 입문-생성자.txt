1. 생성자 (constructor)
    1) 객체를 생성할 때만 호출하는 특수한 메서드임.
    2) new 연산자가 객체의 생성자를 이용하여 객체를 생성해 줌.
    3) 생성자명은 클래스명하고 똑같음.
    4) 메서드이지만 반환형이 없는 형태임.

    5) 클래스를 정의할 때 생성자를 기술하지 않으면 
       매개변수가 없는 생성자가 자동으로 만들어 짐. => 디폴트 생성자라고 함.

    6) 객체가 생성될 때 변수나 상수를 초기화하거나 다른 초기화 기능을 수행하는 메서드를
       호출함.
    7) 대부분의 생성자는 외부에서 접근 가능하지만, 
       필요에 의해 private으로 선언되는 경우도 있음.
                 

2. 기본 생성자 (default constructor)
    1) 생성자명이 클래스명하고 똑같음
    2) 메서드이지만 반환형이 없음
    3) 매개변수 없음
    4) 특별히 수행하는 기능도 없음 (구현부가 없음)
    5) 프로그래머가 굳이 정의하지 않아도 컴파일러가 
       클래스명만 보고 자동으로 만들어줄 수 있음.
    6) 클래스에는 반드시 적어도 하나 이상의 생성자가 존재.
    7) 클래스에 생성자를 구현하지 않아도 new 키워드와 함께 생성자를 호출할 수 있음. 

3. 생성자 만들기
    1) 컴파일러가 제공해 주는 기본 생성자외에 필요에 의해 생성자를 직접 구현할 수 있음.       

4. 여러가지 생성자를 정의 : 생성자 오버로딩(overloading) 
   1) 생성자를 호출하는 코드에서 여러 생성자 중 필요에 따라 호출해서 사용할수 있음.
   2) 오버로딩 -- new
      - 매개변수 개수나 자료형은 다름 
      - 메서드 명은 같음 
      - 리턴타입과 변수명은 상관없음

      - 하나의 클래스 내에 매개변수 개수나 자료형이 다른 동일한 이름의 메서드를 
        여러 개 정의 하는 것
      - 동일하거나 유사한 일을 수행하는 메서드가 전달받는 매개변수에 따라 각기 
        다른 연산하는 경우 유용  

    cf) vs 오버라이딩 (overiding) -- change, modify        

5. this()
   1) 생성자에서 다른 생성자 호출 
   2) 같은 클래스내에서 다른 생성자를 호출할 때 사용함
   3) 다른 생성자 호출은 생성자의 첫문자에서 사용해야 함.
   4) this와 개념이 다름 

   vs. this 
   1) 인스턴스 자신을 가리키는 참조변수 
   2) 인스턴슨의 주소가 저장되어 있음 
   3) 모든 클래스에 지역변수로 숨겨진 채로 존재함 
   4) new라는 연산자가 heap에 인스턴스에 할당할때, 비로소 활성화가 이루어짐.
   

