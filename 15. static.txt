1. Static
    1) static 변수, static 메서드는 메서드 영역에 저장이 되며, 프로그램 시작 전에 로드가 되고, 프로그램 종료 시 소멸된다.
    2) 코드가 메서드 영역에 다 로딩되면 그 중에서 static 으로 지정된 변수와 메서드는 메서드 영역 내 static영역으로 옮겨진다.

2. static 변수
    1) 여러 인스턴스에서 공통으로 사용하는 변수가 필요한 경우
        - 여러 인스턴스가 공유하는 기준 값이 필요한 경우
            - 학생마다 새로운 학번 생성
            - 카드회사에서 카드를 새로 발급할 때 마다 새로운 카드 번호를 부여
            - 회사에 사원이 입사할 때 마다 새로운 사번이 필요한 경우 
    2) 어떤 객체에서도 접근해서 사용할 수 있다.
        - 전역(global) 변수
        - 클래스 변수, 정적 변수(vs. 인스턴스 변수)
        - 인스턴스 생성과 상관 없이 사용 가능하므로 클래스 이름으로 직접 참조가 가능(권장).
    3) static 변수는 프로그램이 메모리에 있는 동안 계속 그 영역을 차지하므로 너무 큰 메모리를 할당하는 것은 지양해야 한다.
        - 클래스 내부의 여러 메서드에서 사용하는 변수는 멤버 변수로 선언하는 것이 좋다.
            - 멤버 변수가 너무 많으면 인스턴스 생성시 쓸 데 없는 메모리가 할당됨.
        - 상황에 적절하게 변수를 사용해야 한다. 

3. 프로그램에서 변수의 유형
        변수 유형         선언위치                사용범위                  메모리              생성과 소멸
    ===============================================================================================================================
     지역 변수          매서드 내부         메서드 내부에서만               stack               메서드가 호출될 때 생성,
    (로컬 변수)                                                                               메서드가 끝나면 소멸

    -------------------------------------------------------------------------------------------------------------------------------
     멤버 변수          클래스 내부      클래스 내부에서 사용,               heap               인스턴스가 생성될 때 힙에 생성,
    (인스턴스 변수)                      private 아니면 참조변수로                              가비지 컬렉터(GC)가 메모리 수거할 때
                                        다른 클래스에서 사용가능                               소멸됨
    -------------------------------------------------------------------------------------------------------------------------------
     static 변수        클래스 내부     클래스 내부에서 사용,              method area          프로그램이 처음 시작할 때 상수와 함께
    (클래스 변수)                       private 아니면 클래스 이름으로                          데이터(메서드) 영역에서 생성되고
                                       다른 클래스에서 사용가능                                프로그램이 끝나고 메모리를 해제할 때 소멸

4. 싱글톤 패턴(singleton pattern)
    1) 의미
        - 클래스의 인스턴스는 오직 하나임을 보장하며 이 인스턴스에 접근할 수 있는 방법을 제공하는 패턴
        - 프로그램에서 인스턴스가 단 한 개만 생성되어야 하는 경우 사용하는 디자인 패턴
    2) static 변수 메서드를 활용하여 구현 할 수 있다.
    3) 구현하기
        - 클래스에서 만들 수 있는 인스턴스가 오직 하나이고, 이에 접근을 어디에서든지 하나로만 통일하여 제공
        - 클래스 다이어그램으로 표시
        - 회사 객체 구현하기    
            - 생성자는 private 으로 선언
            - 클래스 내부에는 유일한 private 인스턴스 생성
            - 외부에서 유일한 인스턴스를 참조할 수 있는 public 메소드 제공