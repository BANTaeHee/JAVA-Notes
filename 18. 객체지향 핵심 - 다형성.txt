1. 다형성 (polymorphism) 이란?
    1) 하나의 코드가 여러 자료형으로 구현되어 실행되는 것 
    2) 같은 코드에서 여러 실행 결과가 나옴 
    3) 정보은닉, 상속과 더불어 OOP의 가장 큰 특징 중 하나임.
    4) 다형성을 잘 활용하면 유연하고 확장성 있고, 유지보수가 편리한 프로그램을 만들수 있음.


2. 다형성을 사용하는 이유(장점)
    1) 다른 동물을 추가하는 경우 
    2) 상속과 메서드 재정의를 활용하여 확장성 있는 프로그램을 만들 수 있음.
    3) 다형성이 적용되지 않는 경우엔 if ~else if문이 구현되고 코드의 유지 보수가 어려워짐. 
    
    4) 상위 클래스에서는 공통적인 부분을 제공하고 하위 클래스에서는 각 클래스에 맞는 기능 구현 
    5) 여러 클래스를 하나의 타입(상위 클래스)으로 핸들링 할수 있음.       

3. 다형성으로 인한 형변환 (캐스팅)
    1) 형변환의 전제 조건 -- 상속 관계에 있는 것만 객체타입 변환이 가능.
    2) Up-casting (업 캐스팅)
        - 자손타입에서 조상타입으로 형변환, 형변환 생략가능. 묵시적 
            => 조작 멤버변수가 줄어듦
    3) Down-casting (다운 캐스팅)
        - 업캐스팅된 클래스를 다시 원래의 타입으로 형변환 
            - 하위 클래스로의 형 변환은 명시적으로 해야함.            
                - 예) Customer customerK = new VIPCustomer();               //묵시적 
                      VIPCustomer  vcustomerK = (VIPCustomer)customerK;     //명시적
        - instanceof 연산자 
            - 인스턴스의 형(Type) 체크 
            - 원래 인스턴스의 형이 맞는지 여부 체크하는 키워드 
                - 맞으면 true, 아니면 false를 반환함.                     


